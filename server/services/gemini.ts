import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

interface HotelData {
  hotelName: string;
  hotelCategory?: string;
  destination: string;
  features: string[];
  featureIcons?: string[];
  amenities: string[];
  description?: string;
  imageUrl?: string;
}

interface GenerationOptions {
  useEmojis: boolean;
  style: "enthusiastic" | "elegant" | "family" | "adventure";
}

// Initialize Gemini API
function getGeminiApi() {
  const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
  
  if (!apiKey) {
    throw new Error("Gemini API Key fehlt. Bitte API-Key konfigurieren.");
  }
  
  return new GoogleGenerativeAI(apiKey);
}

export async function generateWhatsAppPost(hotelData: HotelData, options: GenerationOptions): Promise<string> {
  try {
    const genAI = getGeminiApi();
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    
    // Safety settings - use the most permissive settings as this is a marketing context
    const safetySettings = [
      {
        category: HarmCategory.HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
      },
      {
        category: HarmCategory.HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
      },
      {
        category: HarmCategory.SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
      },
      {
        category: HarmCategory.DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
      },
    ];
    
    // Construct the prompt for Gemini based on the hotel data and styling options
    const styleDescriptions = {
      enthusiastic: "begeistert, energetisch und lebhaft. Verwende ausdrucksstarke Sprache und Ausrufezeichen, um Begeisterung zu vermitteln.",
      elegant: "elegant, kultiviert und luxuri√∂s. Verwende gehobene Sprache, die Exklusivit√§t und Premium-Qualit√§t betont.",
      family: "familienfreundlich und warm. Betone Aspekte, die f√ºr Familien wichtig sind, wie Sicherheit, Komfort und Aktivit√§ten f√ºr Kinder.",
      adventure: "abenteuerlich und aufregend. Betone die M√∂glichkeit f√ºr Erlebnisse, Entdeckungen und aktive Freizeitgestaltung."
    };
    
    // Create emoji map for features if emojis are enabled
    const featureEmojiMap: Record<string, string> = {
      "pool": "üèä‚Äç‚ôÄÔ∏è",
      "strand": "üèñÔ∏è",
      "meer": "üåä",
      "fr√ºhst√ºck": "üçΩÔ∏è",
      "restaurant": "üçΩÔ∏è",
      "essen": "üçΩÔ∏è",
      "gourmet": "üçΩÔ∏è",
      "kulinarisch": "üçΩÔ∏è",
      "dining": "üçΩÔ∏è",
      "spa": "üíÜ‚Äç‚ôÇÔ∏è",
      "wellness": "üßñ‚Äç‚ôÄÔ∏è",
      "massage": "üíÜ‚Äç‚ôÄÔ∏è",
      "fitness": "üí™",
      "gym": "üèãÔ∏è‚Äç‚ôÇÔ∏è",
      "lage": "üìç",
      "zentral": "üìç",
      "zentrum": "üìç",
      "aussicht": "üåá",
      "view": "üåá",
      "blick": "üåá",
      "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
      "familie": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
      "kinder": "üë∂",
      "zimmer": "üõèÔ∏è",
      "suite": "üõèÔ∏è",
      "bett": "üõèÔ∏è",
      "design": "üé®",
      "stil": "üé®",
      "stylish": "üé®",
      "modern": "üé®",
      "bar": "üç∏",
      "cocktail": "üçπ",
      "wein": "üç∑",
      "garten": "üåø",
      "terrasse": "üå¥",
      "balkon": "üå¥",
      "infinity": "‚ôæÔ∏è",
      "service": "üëë",
      "exklusiv": "‚ú®",
      "luxus": "‚ú®",
      "boutique": "üõçÔ∏è",
      "rooftop": "üèôÔ∏è",
      "dachterrasse": "üèôÔ∏è",
      "stadt": "üèôÔ∏è",
      "privat": "üîê",
      "ruhig": "üßò",
      "entspannung": "üßò",
      "party": "üéâ",
      "unterhaltung": "üé≠",
      "show": "üé≠",
      "kultur": "üèõÔ∏è",
      "sehensw√ºrdigkeiten": "üèõÔ∏è",
      "sport": "‚öΩ",
      "aktivit√§t": "üö∂‚Äç‚ôÇÔ∏è",
      "abenteuer": "üßó‚Äç‚ôÇÔ∏è",
      "natur": "üå≤",
      "landschaft": "üèûÔ∏è",
      "shopping": "üõçÔ∏è",
      "einkaufen": "üõçÔ∏è",
      "transfer": "üöó",
      "flughafen": "‚úàÔ∏è",
      "internet": "üì∂",
      "wifi": "üì∂",
      "parken": "üÖøÔ∏è",
      "garage": "üÖøÔ∏è"
    };
    
    function getFeatureEmoji(feature: string): string {
      const lowerFeature = feature.toLowerCase();
      for (const [keyword, emoji] of Object.entries(featureEmojiMap)) {
        if (lowerFeature.includes(keyword)) {
          return emoji;
        }
      }
      return "‚úÖ"; // Default emoji if no match found
    }
    
    // Create enhanced features with emojis if enabled
    const enhancedFeatures = hotelData.features.map((feature, index) => {
      if (options.useEmojis) {
        const emoji = hotelData.featureIcons?.[index] || getFeatureEmoji(feature);
        return `${emoji} ${feature}`;
      }
      return `- ${feature}`;
    });
    
    // Find a suitable destination emoji
    function getDestinationEmoji(destination: string): string {
      const lowerDestination = destination.toLowerCase();
      
      if (lowerDestination.includes("mallorca") || lowerDestination.includes("spanien")) return "üá™üá∏";
      if (lowerDestination.includes("italien")) return "üáÆüáπ";
      if (lowerDestination.includes("griechenland")) return "üá¨üá∑";
      if (lowerDestination.includes("t√ºrkei")) return "üáπüá∑";
      if (lowerDestination.includes("√§gypten")) return "üá™üá¨";
      if (lowerDestination.includes("dubai") || lowerDestination.includes("vae")) return "üá¶üá™";
      if (lowerDestination.includes("thailand")) return "üáπüá≠";
      if (lowerDestination.includes("malediven")) return "üá≤üáª";
      if (lowerDestination.includes("marokko")) return "üá≤üá¶";
      if (lowerDestination.includes("tunesien")) return "üáπüá≥";
      if (lowerDestination.includes("frankreich")) return "üá´üá∑";
      if (lowerDestination.includes("√∂sterreich")) return "üá¶üáπ";
      if (lowerDestination.includes("schweiz")) return "üá®üá≠";
      if (lowerDestination.includes("usa") || lowerDestination.includes("amerika")) return "üá∫üá∏";
      if (lowerDestination.includes("karibik") || lowerDestination.includes("caribbean")) return "üèùÔ∏è";
      if (lowerDestination.includes("bali") || lowerDestination.includes("indonesien")) return "üáÆüá©";
      if (lowerDestination.includes("mexiko")) return "üá≤üáΩ";
      if (lowerDestination.includes("dom rep") || lowerDestination.includes("dominikanische")) return "üá©üá¥";
      if (lowerDestination.includes("portugal")) return "üáµüáπ";
      if (lowerDestination.includes("kroatien")) return "üá≠üá∑";
      
      // Generic destination emojis
      if (lowerDestination.includes("strand") || lowerDestination.includes("beach")) return "üèñÔ∏è";
      if (lowerDestination.includes("berg") || lowerDestination.includes("alpen")) return "üèîÔ∏è";
      if (lowerDestination.includes("city") || lowerDestination.includes("stadt")) return "üåÜ";
      if (lowerDestination.includes("insel")) return "üèùÔ∏è";
      if (lowerDestination.includes("see") || lowerDestination.includes("lake")) return "üåä";
      
      return "‚ú®"; // Default emoji
    }
    
    const destEmoji = options.useEmojis ? getDestinationEmoji(hotelData.destination) : "";
    
    const prompt = `
Du bist ein erfahrener WhatsApp-Marketing-Texter f√ºr Reiseangebote der Firma ucandoo. 
Du sollst einen attraktiven WhatsApp-Post im vorgegebenen Format erstellen.

WICHTIG: Folge EXAKT diesem Format, das ich dir gleich zeige. Keine Abweichungen!

Hier sind die Informationen zum Reiseangebot:
- Hotelname: ${hotelData.hotelName}
- Kategorie: ${hotelData.hotelCategory || "Luxuri√∂ses Hotel"}
- Destination: ${hotelData.destination}
- Hauptmerkmale:
${hotelData.features.map(f => "  * " + f).join("\n")}
${hotelData.description ? `- Beschreibung: ${hotelData.description}` : ""}

Bitte erstelle einen WhatsApp-Post, der ${styleDescriptions[options.style]}

EXAKTES FORMAT f√ºr den Post:
1. Beginne mit einer catchy Headline, die Destination und Hotel nennt
2. Dann 4-5 Bullet Points mit den Hauptmerkmalen (Nutze die gegebenen Merkmale)
3. Dann eine Zeile, die darauf hinweist, dass man mit ucandoo jetzt buchen und sp√§ter zahlen kann
4. Dann die folgenden 3 Links exakt so formatiert:
   üëâ Jetzt buchen
   üëâ Ratenrechner
   üëâ Reiseb√ºro finden
5. Dann einen markanten Abschlusssatz zwischen ‚ú® Emojis
6. Als allerletzte Zeile ein Call-to-Action, der mit ‚û°Ô∏è beginnt

Beispiel-Format:
‚òÄÔ∏è Mallorca in Luxus ‚Äì und zwar richtig! ${destEmoji}
${hotelData.hotelName} ‚Äì dein ${hotelData.hotelCategory || "Traumhotel"} auf ${hotelData.destination}!

${enhancedFeatures.join("\n")}
üí≥ Und wie immer bei uns: Du buchst jetzt ‚Äì und zahlst sp√§ter ganz flexibel mit ucandoo.

üëâ Jetzt buchen
üëâ Ratenrechner
üëâ Reiseb√ºro finden

‚ú® [Catchy Schlussstatement] ‚ú®
‚û°Ô∏è [Call-to-Action]

WICHTIG:
- Verwende den exakten Hotelname und die exakte Destination
- Behalte die genaue Formatierung des Beispiels bei
- Behalte die exakten ucandoo-Bezahlhinweise bei
- Behalte die exakten 3 Links bei
- Benutze keine PlaceholderTexte wie [Catchy Schlussstatement], sondern kreative eigene Formulierungen
- Verwende KEINE ANDEREN LINKS oder CTAs als die vorgegebenen
- Gib nur den fertigen Post zur√ºck, keine Erkl√§rungen
`;

    const generationConfig = {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1000,
    };

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig,
      safetySettings,
    });

    const response = result.response;
    const generatedText = response.text();
    
    return generatedText.trim();
  } catch (error) {
    console.error("Error with Gemini API:", error);
    throw new Error(`Fehler bei der Generierung mit Gemini: ${error instanceof Error ? error.message : "Unbekannter Fehler"}`);
  }
}
